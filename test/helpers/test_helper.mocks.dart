// Mocks generated by Mockito 5.4.2 from annotations
// in sophis/test/helpers/test_helper.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:sophis/app/advice/data/data_source.dart' as _i7;
import 'package:sophis/app/advice/data/dio_client.dart' as _i8;
import 'package:sophis/app/advice/domain/api.dart' as _i3;
import 'package:sophis/app/core/error.dart' as _i5;
import 'package:sophis/app/home/domain/philosopher_entity.dart' as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ApiRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockApiRepository extends _i1.Mock implements _i3.ApiRepository {
  MockApiRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, String>> getAdvice({
    required _i6.PhilosopherEntity? philosopher,
    required String? userInput,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAdvice,
          [],
          {
            #philosopher: philosopher,
            #userInput: userInput,
          },
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, String>>.value(
            _FakeEither_0<_i5.Failure, String>(
          this,
          Invocation.method(
            #getAdvice,
            [],
            {
              #philosopher: philosopher,
              #userInput: userInput,
            },
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, String>>);
}

/// A class which mocks [DataSourceRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockDataSourceRepository extends _i1.Mock
    implements _i7.DataSourceRepository {
  MockDataSourceRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<String> postRequest({required Map<String, dynamic>? body}) =>
      (super.noSuchMethod(
        Invocation.method(
          #postRequest,
          [],
          {#body: body},
        ),
        returnValue: _i4.Future<String>.value(''),
      ) as _i4.Future<String>);
}

/// A class which mocks [DioOperations].
///
/// See the documentation for Mockito's code generation for more information.
class MockDioOperations extends _i1.Mock implements _i8.DioOperations {
  MockDioOperations() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<Map<String, dynamic>> post(
          {required Map<String, dynamic>? body}) =>
      (super.noSuchMethod(
        Invocation.method(
          #post,
          [],
          {#body: body},
        ),
        returnValue:
            _i4.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i4.Future<Map<String, dynamic>>);
}
